name: Build Multiple APKs

on:
  workflow_dispatch:
    inputs:
      environments:
        description: 'Select environments to build (comma-separated)'
        required: true
        default: 'DEV,QA'
        type: string
      base_urls:
        description: 'Base URLs for each environment (comma-separated, same order)'
        required: true
        default: 'https://unified-dev.digit.org/,https://unified-qa.digit.org/'
        type: string
      tenant_ids:
        description: 'Tenant IDs for each environment (comma-separated, same order)'
        required: true
        default: 'dev,qa'
        type: string
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - profile
      mdms_api_path:
        description: 'MDMS API Path (same for all environments)'
        required: true
        default: 'egov-mdms-service/v1/_search'
        type: string
      actions_api_path:
        description: 'Actions API Path (same for all environments)'
        required: true
        default: 'access/v1/actions/mdms/_get'
        type: string
      hierarchy_type:
        description: 'Hierarchy Type (same for all environments)'
        required: true
        default: 'ADMIN'
        type: string

jobs:
  prepare:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Create Build Matrix
        id: set-matrix
        run: |
          # Parse comma-separated inputs
          IFS=',' read -ra ENVS <<< "${{ inputs.environments }}"
          IFS=',' read -ra URLS <<< "${{ inputs.base_urls }}"
          IFS=',' read -ra TENANTS <<< "${{ inputs.tenant_ids }}"
          
          # Validate input lengths match
          if [ ${#ENVS[@]} -ne ${#URLS[@]} ] || [ ${#ENVS[@]} -ne ${#TENANTS[@]} ]; then
            echo "Error: Number of environments, URLs, and tenant IDs must match"
            exit 1
          fi
          
          # Create JSON matrix
          matrix='{"include":['
          for i in "${!ENVS[@]}"; do
            if [ $i -gt 0 ]; then matrix+=','; fi
            env=$(echo "${ENVS[$i]}" | tr -d ' ')
            url=$(echo "${URLS[$i]}" | tr -d ' ')
            tenant=$(echo "${TENANTS[$i]}" | tr -d ' ')
            matrix+="{\"env\":\"$env\",\"base_url\":\"$url\",\"tenant_id\":\"$tenant\"}"
          done
          matrix+=']}'
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build:
    name: Build APK (${{ matrix.env }})
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 3.0.0

      - name: Install Global Dependencies
        run: |
          dart pub global activate mason_cli
          dart pub global activate melos

      - name: Create Environment Configuration
        run: |
          cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="${{ matrix.base_url }}"
          MDMS_API_PATH="${{ inputs.mdms_api_path }}"
          TENANT_ID="${{ matrix.tenant_id }}"
          ACTIONS_API_PATH="${{ inputs.actions_api_path }}"
          HIERARCHY_TYPE="${{ inputs.hierarchy_type }}"
          ENV_NAME="${{ matrix.env }}"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/health-project/check/bandwidth"
          EOF

      - name: Display Configuration
        run: |
          echo "Building APK for ${{ matrix.env }}:"
          echo "Base URL: ${{ matrix.base_url }}"
          echo "Tenant ID: ${{ matrix.tenant_id }}"
          echo "Build Type: ${{ inputs.build_type }}"

      - name: Install Project Dependencies
        run: |
          chmod +x ./tools/install_bricks.sh
          ./tools/install_bricks.sh

      - name: Generate Code
        run: |
          cd apps/health_campaign_field_worker_app
          dart run build_runner build --delete-conflicting-outputs

      - name: Build APK
        run: |
          cd apps/health_campaign_field_worker_app
          if [ "${{ inputs.build_type }}" == "release" ]; then
            flutter build apk --release
          elif [ "${{ inputs.build_type }}" == "profile" ]; then
            flutter build apk -t lib/main_driver.dart --profile
          fi

      - name: Rename APK
        run: |
          cd apps/health_campaign_field_worker_app/build/app/outputs/flutter-apk
          APK_NAME="health-campaign-app-${{ matrix.env }}-${{ inputs.build_type }}.apk"
          if [ "${{ inputs.build_type }}" == "release" ]; then
            mv app-release.apk "$APK_NAME"
          elif [ "${{ inputs.build_type }}" == "profile" ]; then
            mv app-profile.apk "$APK_NAME"
          fi
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}
          path: apps/health_campaign_field_worker_app/build/app/outputs/flutter-apk/${{ env.APK_NAME }}
          retention-days: 30

  summary:
    name: Build Summary
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create Summary
        run: |
          echo "## ðŸ“± Multiple APK Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | APK Name |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Parse environments for summary
          IFS=',' read -ra ENVS <<< "${{ inputs.environments }}"
          for env in "${ENVS[@]}"; do
            env=$(echo "$env" | tr -d ' ')
            echo "| $env | âœ… Built | health-campaign-app-$env-${{ inputs.build_type }}.apk |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¥ All APK files are available in the **Artifacts** section." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- MDMS API: ${{ inputs.mdms_api_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- Hierarchy Type: ${{ inputs.hierarchy_type }}" >> $GITHUB_STEP_SUMMARY