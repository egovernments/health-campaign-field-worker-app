name: Build APK (Predefined Environments)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        options:
          - unified-dev
          - unified-qa
          - unified-uat
          - hcm-demo
          - gcp-test
          - ondo-hcm
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - profile
      custom_app_name:
        description: 'Custom App Name (optional)'
        required: false
        default: 'health-campaign-app'
        type: string

jobs:
  build:
    name: Build APK (${{ inputs.environment }})
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 3.0.0

      - name: Install Global Dependencies
        run: |
          dart pub global activate mason_cli
          dart pub global activate melos

      - name: Configure Environment
        run: |
          case "${{ inputs.environment }}" in
            "unified-dev")
              cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="https://unified-dev.digit.org/"
          MDMS_API_PATH="egov-mdms-service/v1/_search"
          TENANT_ID="dev"
          ACTIONS_API_PATH="access/v1/actions/mdms/_get"
          HIERARCHY_TYPE="NEWTEST00222"
          ENV_NAME="DEV"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/health-project/check/bandwidth"
          EOF
              ;;
            "unified-qa")
              cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="https://unified-qa.digit.org/"
          MDMS_API_PATH="mdms-v2/v1/_search"
          TENANT_ID="mz"
          ACTIONS_API_PATH="access/v1/actions/mdms/_get"
          HIERARCHY_TYPE="ICCD"
          ENV_NAME="QA"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/health-project/check/bandwidth"
          EOF
              ;;
            "unified-uat")
              cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="https://unified-uat.digit.org/"
          MDMS_API_PATH="egov-mdms-service/v1/_search"
          TENANT_ID="mz"
          ACTIONS_API_PATH="access/v1/actions/mdms/_get"
          HIERARCHY_TYPE="MICROPLAN"
          ENV_NAME="UAT"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/health-project/check/bandwidth"
          EOF
              ;;
            "hcm-demo")
              cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="https://hcm-demo.digit.org/"
          MDMS_API_PATH="mdms-v2/v1/_search"
          TENANT_ID="mz"
          ACTIONS_API_PATH="access/v1/actions/mdms/_get"
          HIERARCHY_TYPE="MICROPLAN"
          ENV_NAME="DEMO"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/project/check/bandwidth"
          EOF
              ;;
            "gcp-test")
              cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="https://gcp-hcm-test.digit.org/"
          MDMS_API_PATH="mdms-v2/v1/_search"
          TENANT_ID="mz"
          ACTIONS_API_PATH="access/v1/actions/mdms/_get"
          HIERARCHY_TYPE="MICROPLAN"
          ENV_NAME="GCP"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/project/check/bandwidth"
          EOF
              ;;
            "ondo-hcm")
              cat > apps/health_campaign_field_worker_app/.env << EOF
          BASE_URL="https://ondo-hcm.digit.org/"
          MDMS_API_PATH="mdms-v2/v1/_search"
          TENANT_ID="od"
          ACTIONS_API_PATH="access/v1/actions/mdms/_get"
          HIERARCHY_TYPE="ADMIN"
          ENV_NAME="DEMO"
          SYNC_DOWN_RETRY_COUNT="3"
          RETRY_TIME_INTERVAL="5"
          CONNECT_TIMEOUT="120000"
          RECEIVE_TIMEOUT="120000"
          SEND_TIMEOUT="120000"
          CHECK_BANDWIDTH_API="/project/check/bandwidth"
          EOF
              ;;
            *)
              echo "Unknown environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac

      - name: Display Configuration
        run: |
          echo "Building APK with predefined configuration:"
          echo "Environment: ${{ inputs.environment }}"
          echo "Build Type: ${{ inputs.build_type }}"
          echo "Configuration:"
          cat apps/health_campaign_field_worker_app/.env

      - name: Install Project Dependencies
        run: |
          chmod +x ./tools/install_bricks.sh
          ./tools/install_bricks.sh

      - name: Generate Code
        run: |
          cd apps/health_campaign_field_worker_app
          dart run build_runner build --delete-conflicting-outputs

      - name: Build APK
        run: |
          cd apps/health_campaign_field_worker_app
          if [ "${{ inputs.build_type }}" == "release" ]; then
            flutter build apk --release
          elif [ "${{ inputs.build_type }}" == "profile" ]; then
            flutter build apk -t lib/main_driver.dart --profile
          fi

      - name: Rename APK
        run: |
          cd apps/health_campaign_field_worker_app/build/app/outputs/flutter-apk
          APK_NAME="${{ inputs.custom_app_name }}-${{ inputs.environment }}-${{ inputs.build_type }}.apk"
          if [ "${{ inputs.build_type }}" == "release" ]; then
            mv app-release.apk "$APK_NAME"
          elif [ "${{ inputs.build_type }}" == "profile" ]; then
            mv app-profile.apk "$APK_NAME"
          fi
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}
          path: apps/health_campaign_field_worker_app/build/app/outputs/flutter-apk/${{ env.APK_NAME }}
          retention-days: 30

      - name: Create Release Summary
        run: |
          echo "## 📱 APK Build Summary (Predefined Environment)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Type | ${{ inputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| APK Name | ${{ env.APK_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ APK has been successfully built with predefined environment settings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📥 Download the APK from the **Artifacts** section above." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quick Environment Info:**" >> $GITHUB_STEP_SUMMARY
          case "${{ inputs.environment }}" in
            "unified-dev") echo "- 🔧 Development environment for testing" ;;
            "unified-qa") echo "- 🧪 QA environment for quality assurance" ;;
            "unified-uat") echo "- 🎯 UAT environment for user acceptance testing" ;;
            "hcm-demo") echo "- 🚀 Demo environment for demonstrations" ;;
            "gcp-test") echo "- ☁️ GCP test environment" ;;
            "ondo-hcm") echo "- 🏥 Ondo HCM production environment" ;;
          esac >> $GITHUB_STEP_SUMMARY